"use strict";(self.webpackChunknebula_docs=self.webpackChunknebula_docs||[]).push([[22],{2890:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=n(6070),i=n(1503);const r={},o="nebula authority",s={id:"cli/command/authority",title:"nebula authority",description:"Manage the Nebula authority server.",source:"@site/docs/cli/command/authority.mdx",sourceDirName:"cli/command",slug:"/cli/command/authority",permalink:"/nebula/docs/next/cli/command/authority",draft:!1,unlisted:!1,editUrl:"https://github.com/CremitHQ/nebula/tree/main/docs/docs/docs/cli/command/authority.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Login",permalink:"/nebula/docs/next/cli/command/login"},next:{title:"Path",permalink:"/nebula/docs/next/cli/command/path"}},h={},l=[{value:"Subcommands",id:"subcommands",level:2},{value:"<code>nebula authority list</code>",id:"nebula-authority-list",level:3},{value:"<code>nebula authority add</code>",id:"nebula-authority-add",level:3},{value:"Flags",id:"flags",level:4},{value:"<code>nebula authority init</code>",id:"nebula-authority-init",level:3},{value:"Flags",id:"flags-1",level:4},{value:"<code>nebula authority disarm</code>",id:"nebula-authority-disarm",level:3},{value:"Flags",id:"flags-2",level:4}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"nebula-authority",children:(0,a.jsx)(t.code,{children:"nebula authority"})})}),"\n",(0,a.jsx)(t.p,{children:"Manage the Nebula authority server."}),"\n",(0,a.jsx)(t.h2,{id:"subcommands",children:"Subcommands"}),"\n",(0,a.jsx)(t.h3,{id:"nebula-authority-list",children:(0,a.jsx)(t.code,{children:"nebula authority list"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"nebula authority list"})," command lists the authorities that are registered into the backbone server.\nThe command returns the authority name and host of each authority."]}),"\n",(0,a.jsx)(t.h3,{id:"nebula-authority-add",children:(0,a.jsx)(t.code,{children:"nebula authority add"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"nebula authority add"})," command registers an authority into the backbone server."]}),"\n",(0,a.jsx)(t.h4,{id:"flags",children:"Flags"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"-n, --name <authority_name>"}),": The name of the authority to add. (optional)"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"-h, --host <authority_host>"}),": The host of the authority to add. (optional)"]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"nebula-authority-init",children:(0,a.jsx)(t.code,{children:"nebula authority init"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"nebula authority init"})," command initializes the authority server for storing the key pair safely."]}),"\n",(0,a.jsx)(t.h4,{id:"flags-1",children:"Flags"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"-n, --name <authority_name>"}),": The name of the authority to initialize. You should provide a same name for the authority that you want to initialize."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"--shares <secret_shares>"}),": The number of secret shares to generate. (optional)"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"--threshold <secret_threshold>"}),": The number of shares required to reconstruct the secret. (optional)"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"--file <file_path>"}),": The output file path to store the secret shares. (optional)"]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"nebula-authority-disarm",children:(0,a.jsx)(t.code,{children:"nebula authority disarm"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"nebula authority disarm"})," command disarms the key shares on the authority server.\nDisarming with the key shares means that the authority server reconstructs the root key from the key shares and obtains the plaintext decryption key."]}),"\n",(0,a.jsx)(t.h4,{id:"flags-2",children:"Flags"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"-n, --name <authority_name>"}),": The name of the authority to disarm. You should provide a same name for the authority that you want to disarm."]}),"\n"]})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1503:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var a=n(758);const i={},r=a.createContext(i);function o(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);